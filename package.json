{
	"name": "msvc-example-service",
	"version": "1.3.0",
	"engines": {
		"node": "10.15.3"
	},
	"description": "An example repo that uses tsoa, koa, and typeorm",
	"main": "build/src/index.js",
	"nodemonConfig": {
		"ignore": [
			"serverless/*",
			"docs/*",
			"docker/*",
			"coverage/*"
		]
	},
	"husky": {
		"hooks": {
			"pre-commit": "lint-staged && yarn pre-commit"
		}
	},
	"lint-staged": {
		"*.{js,ts}": [
			"prettier --print-width 120 --use-tabs true --single-quote true --trailing-comma all --write",
			"git add"
		]
	},
	"scripts": {
		"build": "rimraf ./build && yarn tsoa:gen && tsc && mkdirp .tmp && yarn cp:configs",
		"cp:configs": "cpx \"./src/config/*.json\" \"./build/src/config\"",
		"db:init": "docker-compose up -d && yarn run db:init:post-instructions",
		"db:init:post-instructions": "echo 'Next you need to navigate to http://localhost:8000 then enter the email and password defined in docker-compose.yml's pgadmin.environment variables then create a server using the settings defined in docker-compose.yml's db.environment. Note: the ip address on windows will not be localhost, it will be whatever the result is of yarn run db:where-is-dev-db-running' ",
		"db:where-is-dev-db-running": "docker inspect postgres --format=\"{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}\"",
		"db:migrate:generate:instructions": "echo 'If successful, ignore this message. If it failed, then you forgot to pass a name for this specific migration. Might I recommend the ticket number and branch name?'",
		"db:migrate:generate": "yarn run db:migrate:generate:instructions && cross-env NODE_ENV=development ts-node ./node_modules/typeorm/cli --dir ./src/db/migrations migration:generate --name",
		"db:migrate:run": "cross-env NODE_ENV=development ts-node ./node_modules/typeorm/cli migration:run",
		"db:migrate:revert": "cross-env NODE_ENV=development ts-node ./node_modules/typeorm/cli migration:revert",
		"db:migrate:diff": "cross-env NODE_ENV=development ts-node ./src/failIfMigrationIsNeeded.ts",
		"db:start": "docker-compose start",
		"db:stop": "docker-compose stop",
		"db:destroy": "docker-compose down --volumes",
		"dev-server": "mkdirp .tmp && cross-env NODE_ENV=development nodemon --inspect --nolazy -r ts-node/register -- src/index.ts",
		"dev-server:debug": "cross-env DEBUG=di-* yarn dev-server",
		"docker:build": "docker build -t msvc-voice-settings .",
		"docker:run": "docker run -p 3000:5555 msvc-voice-settings",
		"lint": "tslint --project .",
		"start": "cross-env PORT=3000 node build/src/index.js",
		"start:dev": "cross-env NODE_ENV=development yarn build && cross-env NODE_ENV=development node build/src/index.js",
		"tsoa:gen": "ts-node tsoaCustomCli.ts --all",
		"pretest": "cross-env NODE_ENV=test yarn build",
		"test": "cross-env NODE_ENV=test tsc && cross-env NODE_ENV=test jest --collectCoverage --runInBand",
		"test:debug:osx": "node --inspect node_modules/.bin/jest --runInBand",
		"test:debug:windows": "node --inspect-brk ./node_modules/jest/bin/jest.js --runInBand",
		"test:verbose": "cross-env LOG_LEVEL=debug PRETTY_PRINT_LOGS=true yarn test",
		"pre-commit": "echo 'Please DO NOT SKIP this hook since it runs automation that can not be run elsewhere!!!' && cross-env NODE_ENV=test yarn build && yarn db:migrate:diff && yarn lint && yarn run test",
		"tsnode": "node -r ts-node/register"
	},
	"license": "UNLICENSED",
	"private": true,
	"contributors": [],
	"dependencies": {
		"@hapi/boom": "^7.4.2",
		"axios": "^0.18.0",
		"chalk": "^2.4.2",
		"cross-env": "^5.2.0",
		"http-errors": "^1.7.3",
		"http-status-codes": "^1.3.2",
		"js-joda": "^1.9.3",
		"js-joda-timezone": "^2.0.2",
		"kcors": "^2.2.1",
		"koa": "^2.5.1",
		"koa-bodyparser": "^4.2.1",
		"koa-busboy": "^1.1.1",
		"koa-compose": "^4.1.0",
		"koa-compress": "^3.0.0",
		"koa-router": "^7.4.0",
		"koa-static": "^5.0.0",
		"koa2-swagger-ui": "^2.14.2",
		"lodash": "^4.17.11",
		"nconf": "^0.10.0",
		"pg": "^7.4.3",
		"pino": "^5.13.0",
		"pino-pretty": "^3.2.0",
		"prom-client": "^11.0.0",
		"query-string": "^6.1.0",
		"shortid": "^2.2.8",
		"supertest": "^4.0.2",
		"tsoa": "^2.4.11",
		"typeorm": "^0.2.25",
		"utility-types": "^3.7.0",
		"uuid": "^3.3.2"
	},
	"devDependencies": {
		"@types/debug": "^0.0.30",
		"@types/hapi__boom": "^7.4.0",
		"@types/http-errors": "^1.6.1",
		"@types/http-proxy": "^1.16.1",
		"@types/jest": "^24.0.15",
		"@types/kcors": "^2.2.3",
		"@types/koa": "^2.0.45",
		"@types/koa-bodyparser": "^4.2.0",
		"@types/koa-compress": "^2.0.8",
		"@types/koa-router": "^7.0.28",
		"@types/koa-static": "^4.0.1",
		"@types/lodash": "^4.14.109",
		"@types/nconf": "^0.0.37",
		"@types/node": "^10.3.3",
		"@types/pino": "^5.8.8",
		"@types/query-string": "^5.1.0",
		"@types/shortid": "^0.0.29",
		"@types/sql.js": "^1.0.1",
		"@types/supertest": "^2.0.8",
		"@types/uuid": "^3.4.5",
		"axios-mock-adapter": "^1.15.0",
		"cpx": "^1.5.0",
		"factory.ts": "^0.2.2",
		"husky": "^1.0.1",
		"jest": "^24.8.0",
		"koa-sslify": "^2.1.2",
		"lint-staged": "^9.2.3",
		"mkdirp": "^0.5.1",
		"nodemon": "^1.17.5",
		"npm": "^6.0.1",
		"prettier": "^1.12.1",
		"rimraf": "^2.6.3",
		"sql.js": "^1.0.0",
		"ts-jest": "^24.0.2",
		"ts-node": "^6.0.3",
		"tslint": "^5.10.0",
		"tslint-config-prettier": "^1.13.0",
		"typescript": "^3.3.0"
	}
}
